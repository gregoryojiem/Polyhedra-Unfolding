@page "/"

<PageTitle>Main</PageTitle>

<script type="importmap">
    {
    "imports": {
    "three": "https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js",
    "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/",
    "three/extras/": "https://cdn.jsdelivr.net/npm/three@0.169.0/src/extras/"

    }
    }
</script>

<script type="module" src="renderer.js"></script>

<h1>Polyhedra Unfolding</h1>

<div class="dropdown">
    <button class="drop-btn">Shapes ▼</button>
    <div class="dropdown-content">
        @foreach (var shapeName in shapeNames)
        {
            <a @onclick="@(() => OnSelectedShapeClick(shapeName))">@shapeName</a>
        }
    </div>
</div>

@if (PolyMain.currentView == "3D")
{
    <div>
        <button @onclick="OnFlattenClick">See flattened polyhedra</button>
        <button @onclick="OnSwapViewClick">Swap to 2D view</button>
    </div>
}

else if (PolyMain.currentView == "2D")
{
    <div>
        <button @onclick="OnStepButtonClick">Step through algorithm</button>
        <button @onclick="OnUndoButtonClick">Undo Step</button>
        <button @onclick="OnUnplacedButtonClick">Unplaced polygon visibility</button>
        <button @onclick="OnSwapViewClick">Swap to 3D view</button>
    </div>
}

@inject IJSRuntime JSRuntime
@using Unfolding.Client.Polyhedra

@code {
    private List<string> shapeNames = new List<string>() {
        "Triangular Pyramid", "Cube", "Tetrahedron", "Octahedron",
        "Hexagonal Pyramid", "Dodecahedron", "Elongated Square Dipyramid", "Random Polyhedra"
    };

    protected override async Task OnAfterRenderAsync(bool begunRender)
    {
        if (begunRender)
        {
            var currentView = PolyMain.currentView;

            if (currentView == "2D")
            {
                var data2D = PolyMain.GetPolygonsJSON();
                await JSRuntime.InvokeVoidAsync("handleRendering2D", data2D);
            }
            else if (currentView == "3D")
            {
                var polyhedronJSON = PolyMain.GetPolyhedron().GetPolyhedraJSON();
                await JSRuntime.InvokeVoidAsync("handleRendering3D", polyhedronJSON);
            }

            StateHasChanged();
        }
    }

    private async Task OnFlattenClick()
    {
        PolyMain.FlattenToggle();
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }

    private async Task OnSwapViewClick()
    {
        PolyMain.SwapView();
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }

    private async Task OnStepButtonClick()
    {
        PolyMain.PerformStep();
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }

    private async Task OnUndoButtonClick()
    {
        PolyMain.UndoStep();
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }

    private async Task OnUnplacedButtonClick()
    {
        PolyMain.UnplacedVisibilityToggle();
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }

    private async Task OnSelectedShapeClick(string polyhedra)
    {
        PolyMain.SelectPolyhedra(polyhedra);
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }
}