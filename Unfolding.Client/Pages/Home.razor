@page "/"

<PageTitle>Main</PageTitle>

<script type="importmap">
    {
    "imports": {
    "three": "https://cdn.jsdelivr.net/npm/three@0.169.0/build/three.module.js",
    "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/",
    "three/extras/": "https://cdn.jsdelivr.net/npm/three@0.169.0/src/extras/"

    }
    }
</script>

<script type="module" src="renderer.js"></script>

<h1>Polyhedra Unfolding</h1>

<div class="dropdown">
    <button class="drop-btn" @onclick="ToggleDropdown">Shapes ▼</button>
    @if (displayDropdown)
    {
        <div class="dropdown-content">
            @foreach (var shapeName in shapeNames)
            {
                <a @onclick="@(() => { OnSelectedShapeClick(shapeName); ToggleDropdown(); })">
                    @shapeName
                </a>
            }
        </div>
    }
</div>

@if (MainPageViewModel.currentView == "3D")
{
    <div>
        <button @onclick="OnFlattenClick">See flattened polyhedra</button>
        <button @onclick="OnSwapViewClick">Swap to 2D view</button>
    </div>
}

else if (MainPageViewModel.currentView == "2D")
{
    <div>
        <button @onclick="OnStepButtonClick">Step through algorithm</button>
        <button @onclick="OnUndoButtonClick">Undo Step</button>
        <button @onclick="OnUnplacedButtonClick">Unplaced polygon visibility</button>
        <button @onclick="OnSwapViewClick">Swap to 3D view</button>
    </div>
}

@inject IJSRuntime JSRuntime
@using Unfolding.Client.Polyhedra

@code {
    private bool displayDropdown = false;
    private List<string> shapeNames = PolyhedronLibrary.GetShapeNames();

    protected override async Task OnAfterRenderAsync(bool begunRender)
    {
        if (begunRender)
        {
            var currentView = MainPageViewModel.currentView;

            if (currentView == "2D")
            {
                var polygonNetJSON = MainPageViewModel.GetDisplayNetJSON();
                await JSRuntime.InvokeVoidAsync("handleRendering2D", polygonNetJSON);
            }
            else if (currentView == "3D")
            {
                var polyhedronJSON = MainPageViewModel.GetDisplayPolyhedronJSON();
                await JSRuntime.InvokeVoidAsync("handleRendering3D", polyhedronJSON);
            }

            StateHasChanged();
        }
    }

    private async Task OnFlattenClick()
    {
        MainPageViewModel.FlattenToggle();
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }

    private async Task OnSwapViewClick()
    {
        MainPageViewModel.SwapView();
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }

    private async Task OnStepButtonClick()
    {
        MainPageViewModel.PerformStep();
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }

    private async Task OnUndoButtonClick()
    {
        MainPageViewModel.UndoStep();
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }

    private async Task OnUnplacedButtonClick()
    {
        MainPageViewModel.UnplacedVisibilityToggle();
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }

    private async Task OnSelectedShapeClick(string polyhedra)
    {
        MainPageViewModel.SelectPolyhedra(polyhedra);
        await OnAfterRenderAsync(true);
        StateHasChanged();
    }

    private void ToggleDropdown()
    {
        Console.WriteLine("toggling dropdown");
        displayDropdown = !displayDropdown;
        StateHasChanged();
    }
}